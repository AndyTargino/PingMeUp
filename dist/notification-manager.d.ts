import { EventEmitter } from 'events';
import { NotificationData, NotificationConfig, NotificationWindow, NotificationManager, NotificationType, NotificationStats } from './types';
export declare class ElectronNotificationManager extends EventEmitter implements NotificationManager {
    private windows;
    private groups;
    private notificationQueue;
    private config;
    private idCounter;
    private stats;
    private processingQueue;
    constructor(config?: NotificationConfig);
    private setupEventHandlers;
    private detectSystemTheme;
    private getSystemColorScheme;
    private generateId;
    private calculateNotificationHeight;
    private calculatePosition;
    private repositionAllWindows;
    private updateAllWindowsTheme;
    private playSound;
    private shouldAutoClose;
    private updateStats;
    create(data: NotificationData): Promise<string>;
    private showWindowWithAnimation;
    private getVisibleCount;
    update(id: string, data: Partial<NotificationData>): Promise<boolean>;
    close(id: string): Promise<boolean>;
    closeAll(): Promise<void>;
    closeByCategory(category: string): Promise<void>;
    closeByType(type: NotificationType): Promise<void>;
    updateProgress(id: string, progress: number): void;
    setProgressIndeterminate(id: string, indeterminate: boolean): void;
    queueNotification(data: NotificationData): Promise<string>;
    processQueue(): Promise<void>;
    clearQueue(): void;
    createGroup(category: string): void;
    collapseGroup(category: string): void;
    expandGroup(category: string): void;
    getActive(): NotificationWindow[];
    getByCategory(category: string): NotificationWindow[];
    getStats(): NotificationStats;
    updateConfig(config: Partial<NotificationConfig>): void;
    getConfig(): NotificationConfig;
    info(title: string, message: string, options?: Partial<NotificationData>): Promise<string>;
    success(title: string, message: string, options?: Partial<NotificationData>): Promise<string>;
    warning(title: string, message: string, options?: Partial<NotificationData>): Promise<string>;
    error(title: string, message: string, options?: Partial<NotificationData>): Promise<string>;
    progress(title: string, message: string, options?: Partial<NotificationData>): Promise<string>;
    reply(title: string, message: string, options?: Partial<NotificationData>): Promise<string>;
    achievement(title: string, message: string, options?: Partial<NotificationData>): Promise<string>;
    download(title: string, message: string, options?: Partial<NotificationData>): Promise<string>;
    confirmation(title: string, message: string, options?: Partial<NotificationData>): Promise<string>;
    reminder(title: string, message: string, options?: Partial<NotificationData>): Promise<string>;
    weather(title: string, message: string, options?: Partial<NotificationData>): Promise<string>;
}
//# sourceMappingURL=notification-manager.d.ts.map