name: Auto Release

on:
  push:
    branches: [ main ]

jobs:
  auto-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Get current version
      id: current_version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Get last release tag
      id: last_tag
      run: |
        # Check if any tags exist
        if git tag -l | grep -q .; then
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "has_tags=true" >> $GITHUB_OUTPUT
        else
          echo "tag=" >> $GITHUB_OUTPUT
          echo "has_tags=false" >> $GITHUB_OUTPUT
        fi

    - name: Analyze commits and changes
      id: analyze
      run: |
        # Get commits since last tag or all commits if no tags
        if [ "${{ steps.last_tag.outputs.has_tags }}" = "true" ]; then
          COMMITS=$(git log ${{ steps.last_tag.outputs.tag }}..HEAD --oneline --no-merges)
          CHANGED_FILES=$(git diff --name-only ${{ steps.last_tag.outputs.tag }}..HEAD | wc -l)
          LINES_CHANGED=$(git diff --stat ${{ steps.last_tag.outputs.tag }}..HEAD | tail -n1 | grep -oE '[0-9]+' | head -n1 || echo "0")
        else
          # First release - analyze all commits
          COMMITS=$(git log --oneline --no-merges)
          CHANGED_FILES=$(find . -name "*.js" -o -name "*.ts" -o -name "*.json" -o -name "*.md" | grep -v node_modules | wc -l)
          LINES_CHANGED=$(find . -name "*.js" -o -name "*.ts" | grep -v node_modules | xargs wc -l | tail -n1 | awk '{print $1}' || echo "0")
        fi
        
        echo "commits<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "lines_changed=$LINES_CHANGED" >> $GITHUB_OUTPUT
        
        # Analyze commit types
        BREAKING_CHANGES=$(echo "$COMMITS" | grep -i "BREAKING\|breaking" | wc -l)
        FEATURES=$(echo "$COMMITS" | grep -iE "^[a-f0-9]+ (feat|feature)" | wc -l)
        FIXES=$(echo "$COMMITS" | grep -iE "^[a-f0-9]+ (fix|bugfix)" | wc -l)
        REFACTOR=$(echo "$COMMITS" | grep -iE "^[a-f0-9]+ (refactor|perf)" | wc -l)
        DOCS=$(echo "$COMMITS" | grep -iE "^[a-f0-9]+ (docs|doc)" | wc -l)
        CHORE=$(echo "$COMMITS" | grep -iE "^[a-f0-9]+ (chore|ci|build|style)" | wc -l)
        
        echo "breaking_changes=$BREAKING_CHANGES" >> $GITHUB_OUTPUT
        echo "features=$FEATURES" >> $GITHUB_OUTPUT
        echo "fixes=$FIXES" >> $GITHUB_OUTPUT
        echo "refactor=$REFACTOR" >> $GITHUB_OUTPUT
        echo "docs=$DOCS" >> $GITHUB_OUTPUT
        echo "chore=$CHORE" >> $GITHUB_OUTPUT

    - name: Determine version bump
      id: version_bump
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
        BREAKING_CHANGES="${{ steps.analyze.outputs.breaking_changes }}"
        FEATURES="${{ steps.analyze.outputs.features }}"
        FIXES="${{ steps.analyze.outputs.fixes }}"
        REFACTOR="${{ steps.analyze.outputs.refactor }}"
        CHANGED_FILES="${{ steps.analyze.outputs.changed_files }}"
        LINES_CHANGED="${{ steps.analyze.outputs.lines_changed }}"
        
        # Parse current version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Determine bump type based on analysis
        BUMP_TYPE="none"
        
        # For first release, start with 1.0.0 if significant changes
        if [ "${{ steps.last_tag.outputs.has_tags }}" = "false" ]; then
          if [ $FEATURES -gt 0 ] || [ $CHANGED_FILES -gt 5 ]; then
            BUMP_TYPE="minor"
            NEW_VERSION="1.0.0"
          else
            BUMP_TYPE="patch"
            NEW_VERSION="0.1.0"
          fi
        else
          # Major version bump conditions
          if [ $BREAKING_CHANGES -gt 0 ] || [ $LINES_CHANGED -gt 1000 ]; then
            BUMP_TYPE="major"
            NEW_VERSION="$((MAJOR + 1)).0.0"
          # Minor version bump conditions
          elif [ $FEATURES -gt 0 ] || [ $CHANGED_FILES -gt 10 ] || [ $LINES_CHANGED -gt 200 ]; then
            BUMP_TYPE="minor"
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          # Patch version bump conditions
          elif [ $FIXES -gt 0 ] || [ $REFACTOR -gt 0 ] || [ $CHANGED_FILES -gt 0 ]; then
            BUMP_TYPE="patch"
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
        fi
        
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Create detailed analysis
        echo "analysis<<EOF" >> $GITHUB_OUTPUT
        echo "### Version Bump Analysis" >> $GITHUB_OUTPUT
        echo "- **Current Version**: $CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "- **Proposed Version**: $NEW_VERSION" >> $GITHUB_OUTPUT
        echo "- **Bump Type**: $BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Change Analysis" >> $GITHUB_OUTPUT
        echo "- **Breaking Changes**: $BREAKING_CHANGES" >> $GITHUB_OUTPUT
        echo "- **Features**: $FEATURES" >> $GITHUB_OUTPUT
        echo "- **Fixes**: $FIXES" >> $GITHUB_OUTPUT
        echo "- **Refactoring**: $REFACTOR" >> $GITHUB_OUTPUT
        echo "- **Files Changed**: $CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "- **Lines Changed**: $LINES_CHANGED" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Update package.json version
      if: steps.version_bump.outputs.bump_type != 'none'
      run: |
        NEW_VERSION="${{ steps.version_bump.outputs.new_version }}"
        npm version $NEW_VERSION --no-git-tag-version
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add package.json
        git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
        git push

    - name: Create Git tag
      if: steps.version_bump.outputs.bump_type != 'none'
      run: |
        NEW_VERSION="${{ steps.version_bump.outputs.new_version }}"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin "v$NEW_VERSION"

    - name: Generate changelog
      if: steps.version_bump.outputs.bump_type != 'none'
      id: changelog
      run: |
        NEW_VERSION="${{ steps.version_bump.outputs.new_version }}"
        COMMITS="${{ steps.analyze.outputs.commits }}"
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "## Release v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "${{ steps.version_bump.outputs.analysis }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Commits" >> $GITHUB_OUTPUT
        echo "$COMMITS" | sed 's/^/- /' >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Installation" >> $GITHUB_OUTPUT
        echo '```bash' >> $GITHUB_OUTPUT
        echo "npm install pingmeup@$NEW_VERSION" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "or" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```bash' >> $GITHUB_OUTPUT
        echo "yarn add pingmeup@$NEW_VERSION" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      if: steps.version_bump.outputs.bump_type != 'none'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version_bump.outputs.new_version }}
        release_name: Release v${{ steps.version_bump.outputs.new_version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Publish to NPM
      if: steps.version_bump.outputs.bump_type != 'none'
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: No version bump needed
      if: steps.version_bump.outputs.bump_type == 'none'
      run: |
        echo "No version bump needed based on current changes."
        echo "Current version: ${{ steps.current_version.outputs.version }}"
        echo "Consider making more significant changes or using conventional commit messages."